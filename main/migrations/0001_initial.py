# Generated by Django 5.0.6 on 2024-05-20 13:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Algorithms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=60, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('method', models.CharField(max_length=60, verbose_name='Метод')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Создан')),
            ],
            options={
                'verbose_name': 'Алгоритм',
                'verbose_name_plural': 'Алгоритмы',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30, verbose_name='Автор')),
                ('from_email', models.EmailField(max_length=50, verbose_name='E-mail')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Создано')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Encrypts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('before', models.CharField(max_length=60, verbose_name='Значение')),
                ('result', models.CharField(max_length=60, verbose_name='Результат')),
                ('key', models.CharField(max_length=60, verbose_name='Ключ')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Создано')),
                ('algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Алгоритм', to='main.algorithms', verbose_name='Алгоритм')),
            ],
            options={
                'verbose_name': 'Шифрование',
                'verbose_name_plural': 'Шифрования',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='ModelUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_activated', models.BooleanField(db_index=True, default=True, verbose_name='Активирован')),
                ('send_messages', models.BooleanField(default=True, verbose_name='Получать оповещения')),
                ('privacy', models.BooleanField(error_messages='Чтобы пройти регистраницию, необходимо принять политику конфиденциальности.', null=True, verbose_name='Политика конфиденциальности')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('encrypt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.encrypts', verbose_name='Шифрования')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-last_login'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
